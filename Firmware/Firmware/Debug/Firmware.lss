
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000ac  008000ac  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e24  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000677  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ca  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000778  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002f2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	dc c0       	rjmp	.+440    	; 0x1bc <__bad_interrupt>
   4:	06 c2       	rjmp	.+1036   	; 0x412 <__vector_2>
   6:	da c0       	rjmp	.+436    	; 0x1bc <__bad_interrupt>
   8:	d9 c0       	rjmp	.+434    	; 0x1bc <__bad_interrupt>
   a:	d8 c0       	rjmp	.+432    	; 0x1bc <__bad_interrupt>
   c:	d7 c0       	rjmp	.+430    	; 0x1bc <__bad_interrupt>
   e:	d6 c0       	rjmp	.+428    	; 0x1bc <__bad_interrupt>
  10:	d5 c0       	rjmp	.+426    	; 0x1bc <__bad_interrupt>
  12:	d4 c0       	rjmp	.+424    	; 0x1bc <__bad_interrupt>
  14:	d3 c0       	rjmp	.+422    	; 0x1bc <__bad_interrupt>
  16:	d2 c0       	rjmp	.+420    	; 0x1bc <__bad_interrupt>
  18:	d1 c0       	rjmp	.+418    	; 0x1bc <__bad_interrupt>
  1a:	d0 c0       	rjmp	.+416    	; 0x1bc <__bad_interrupt>
  1c:	cf c0       	rjmp	.+414    	; 0x1bc <__bad_interrupt>

0000001e <Deckbeats>:
  1e:	04 01 02 02 02 02 02 02 01 01 01 01 04 01 02 02     ................
  2e:	04 04                                               ..

00000030 <Deckocatave>:
  30:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 03     ................
  40:	04 00                                               ..

00000042 <Decknotes>:
  42:	9e b2 bc d4 ed d4 bc ed d4 bc b2 d4 bc d4 ed 7d     ...............}
  52:	ed 00                                               ..

00000054 <Merrybeats>:
  54:	02 02 01 01 01 01 02 02 02 02 01 01 01 01 02 02     ................
  64:	02 02 01 01 01 01 02 02 01 01 02 02 02 04 04        ...............

00000073 <MerryOctave>:
  73:	04 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
  83:	04 04 04 05 04 04 04 04 04 04 04 04 04 04 00        ...............

00000092 <Merrynotes>:
  92:	d4 9e 9e 8d 9e a7 bc bc bc 8d 8d 7d 8d 9e a7 d4     ...........}....
  a2:	d4 7d 7d ed 7d 8d 9e bc d4 d4 bc 8d a7 9e 00        .}}.}..........

000000b1 <Mariobeats>:
  b1:	04 04 04 04 04 04 04 04 04 04 04 04 04              .............

000000be <MarioOctave>:
  be:	05 05 00 05 00 05 05 00 05 00 00 00 04              .............

000000cb <Marionotes>:
  cb:	bc bc 00 bc 00 ed bc 00 9e 00 00 00 9e              .............

000000d8 <Frostybeats>:
  d8:	04 04 01 02 04 01 01 02 02 02 02 04 02 01 01 02     ................
  e8:	02 02 01 01 02 02 02 01 01 02 02 02 02 04 04        ...............

000000f7 <FrostyOctave>:
  f7:	04 04 04 04 05 04 05 05 05 04 04 04 00 04 05 05     ................
 107:	05 04 04 04 04 05 04 04 04 04 04 04 04 04 00        ...............

00000116 <Frostynotes>:
 116:	9e bc b2 9e ed 7d ed d4 ed 7d 8d 9e 00 7d ed d4     .....}...}...}..
 126:	ed 7d 8d 8d 9e ed bc 9e 8d 9e b2 bc d4 ed 00        .}.............

00000135 <Jinglebeats>:
 135:	02 02 04 02 02 04 02 02 02 02 04 04 02 02 02 02     ................
 145:	02 02 02 02 02 02 02 02 04 04 04                    ...........

00000150 <JingleOctave>:
 150:	04 04 04 04 04 04 04 05 04 04 04 00 05 05 05 05     ................
 160:	05 04 04 04 04 04 04 04 04 05 00                    ...........

0000016b <Jinglenotes>:
 16b:	7d 7d 7d 7d 7d 7d 7d d4 9e 8d 7d 00 ed ed ed ed     }}}}}}}...}.....
 17b:	ed 7d 7d 7d 7d 8d 8d 7d 8d d4 00                    .}}}}..}...

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf e5       	ldi	r28, 0x5F	; 95
 18c:	d2 e0       	ldi	r29, 0x02	; 2
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61

00000192 <__do_copy_data>:
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	a0 e6       	ldi	r26, 0x60	; 96
 196:	b0 e0       	ldi	r27, 0x00	; 0
 198:	e4 e3       	ldi	r30, 0x34	; 52
 19a:	f5 e0       	ldi	r31, 0x05	; 5
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__do_copy_data+0x10>
 19e:	05 90       	lpm	r0, Z+
 1a0:	0d 92       	st	X+, r0
 1a2:	ac 3a       	cpi	r26, 0xAC	; 172
 1a4:	b1 07       	cpc	r27, r17
 1a6:	d9 f7       	brne	.-10     	; 0x19e <__do_copy_data+0xc>

000001a8 <__do_clear_bss>:
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	ac ea       	ldi	r26, 0xAC	; 172
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <.do_clear_bss_start>

000001b0 <.do_clear_bss_loop>:
 1b0:	1d 92       	st	X+, r1

000001b2 <.do_clear_bss_start>:
 1b2:	af 3a       	cpi	r26, 0xAF	; 175
 1b4:	b2 07       	cpc	r27, r18
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <.do_clear_bss_loop>
 1b8:	4c d1       	rcall	.+664    	; 0x452 <main>
 1ba:	ba c1       	rjmp	.+884    	; 0x530 <_exit>

000001bc <__bad_interrupt>:
 1bc:	21 cf       	rjmp	.-446    	; 0x0 <__vectors>

000001be <sendByte>:
		
	}
}

void	sendLatch(void) {
	DELAYCYCLES(NS_TO_CYCLES(RES));
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	ac 01       	movw	r20, r24
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <sendByte+0x10>
 1ca:	55 95       	asr	r21
 1cc:	47 95       	ror	r20
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <sendByte+0xc>
 1d2:	40 ff       	sbrs	r20, 0
 1d4:	06 c0       	rjmp	.+12     	; 0x1e2 <sendByte+0x24>
 1d6:	c1 9a       	sbi	0x18, 1	; 24
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <sendByte+0x1c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <sendByte+0x1e>
 1dc:	00 00       	nop
 1de:	c1 98       	cbi	0x18, 1	; 24
 1e0:	05 c0       	rjmp	.+10     	; 0x1ec <sendByte+0x2e>
 1e2:	c1 9a       	sbi	0x18, 1	; 24
 1e4:	00 00       	nop
 1e6:	c1 98       	cbi	0x18, 1	; 24
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <sendByte+0x2c>
 1ea:	00 00       	nop
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	28 30       	cpi	r18, 0x08	; 8
 1f2:	31 05       	cpc	r19, r1
 1f4:	39 f7       	brne	.-50     	; 0x1c4 <sendByte+0x6>
 1f6:	08 95       	ret

000001f8 <setPixel>:
}

void	setPixel ( uint8_t r, uint8_t g, uint8_t b) {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	d8 2f       	mov	r29, r24
 1fe:	86 2f       	mov	r24, r22
 200:	c4 2f       	mov	r28, r20
	
 		sendByte(g);
 202:	dd df       	rcall	.-70     	; 0x1be <sendByte>
 		sendByte(r);
 204:	8d 2f       	mov	r24, r29
 206:	db df       	rcall	.-74     	; 0x1be <sendByte>
 		sendByte(b);
 208:	8c 2f       	mov	r24, r28
 20a:	d9 df       	rcall	.-78     	; 0x1be <sendByte>

}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <showColor>:


void	showColor() {
 212:	cf 93       	push	r28
	
	for (uint8_t i=0; i<PIXELS; i++)
 214:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <PIXELS>
 218:	88 23       	and	r24, r24
 21a:	01 f1       	breq	.+64     	; 0x25c <showColor+0x4a>
 21c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (colorIndex>=25) colorIndex = 0;
 21e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 222:	89 31       	cpi	r24, 0x19	; 25
 224:	10 f0       	brcs	.+4      	; 0x22a <showColor+0x18>
 226:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__data_end>
		setPixel(color[colorIndex][0],color[colorIndex][1],color[colorIndex][2]);
 22a:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <__data_end>
 22e:	82 2f       	mov	r24, r18
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	82 0f       	add	r24, r18
 234:	91 1d       	adc	r25, r1
 236:	82 0f       	add	r24, r18
 238:	91 1d       	adc	r25, r1
 23a:	fc 01       	movw	r30, r24
 23c:	ef 59       	subi	r30, 0x9F	; 159
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	42 81       	ldd	r20, Z+2	; 0x02
 242:	61 81       	ldd	r22, Z+1	; 0x01
 244:	80 81       	ld	r24, Z
 246:	d8 df       	rcall	.-80     	; 0x1f8 <setPixel>
		colorIndex++;
 248:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end>
}


void	showColor() {
	
	for (uint8_t i=0; i<PIXELS; i++)
 252:	cf 5f       	subi	r28, 0xFF	; 255
 254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <PIXELS>
 258:	c8 17       	cp	r28, r24
 25a:	08 f3       	brcs	.-62     	; 0x21e <showColor+0xc>
	{
		if (colorIndex>=25) colorIndex = 0;
		setPixel(color[colorIndex][0],color[colorIndex][1],color[colorIndex][2]);
		colorIndex++;
	}
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <switchOffLeds>:

void switchOffLeds() {

	PORTB &= ~(1 << PB1);	// OUTPUT -> 0
 260:	c1 98       	cbi	0x18, 1	; 24
	DDRB  &= ~(1 << PB1);   // PB1->INPUT (Hi-Z)
 262:	b9 98       	cbi	0x17, 1	; 23
	PORTB &= ~(1 << PB0);	// Switch off MOSFET
 264:	c0 98       	cbi	0x18, 0	; 24
 266:	08 95       	ret

00000268 <switchOnLeds>:
}

void switchOnLeds() {
	
	PORTB |= (1 << PB0);	// Switch on MOSFET
 268:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f ec       	ldi	r24, 0xCF	; 207
 26c:	97 e0       	ldi	r25, 0x07	; 7
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <switchOnLeds+0x6>
 272:	00 c0       	rjmp	.+0      	; 0x274 <switchOnLeds+0xc>
 274:	00 00       	nop
	_delay_ms(1);
	DDRB  |= (1 << PB1);    // PB1 -> OUTPUT
 276:	b9 9a       	sbi	0x17, 1	; 23
	PORTB &= ~(1 << PB1);	// OUTPUT -> 0
 278:	c1 98       	cbi	0x18, 1	; 24
 27a:	08 95       	ret

0000027c <playTone>:
}


void playTone(uint8_t tone, uint8_t octave) {

	TCCR1  = 0x90;						// clear TCNT1 on compare match
 27c:	90 e9       	ldi	r25, 0x90	; 144
 27e:	90 bf       	out	0x30, r25	; 48
	OCR1C = tone-1;						// Set compare register
 280:	9f ef       	ldi	r25, 0xFF	; 255
 282:	98 0f       	add	r25, r24
 284:	9d bd       	out	0x2d, r25	; 45
	TCCR1 |=  (11-octave);				// Set prescaler / start counter
 286:	20 b7       	in	r18, 0x30	; 48
 288:	9b e0       	ldi	r25, 0x0B	; 11
 28a:	96 1b       	sub	r25, r22
 28c:	92 2b       	or	r25, r18
 28e:	90 bf       	out	0x30, r25	; 48
	if (tone==0) TCCR1 = 0x90;			// Stop timer1
 290:	81 11       	cpse	r24, r1
 292:	02 c0       	rjmp	.+4      	; 0x298 <playTone+0x1c>
 294:	80 e9       	ldi	r24, 0x90	; 144
 296:	80 bf       	out	0x30, r24	; 48
 298:	08 95       	ret

0000029a <playMario>:

}



void playMario (void) {
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
	
	switchOnLeds();
 2aa:	de df       	rcall	.-68     	; 0x268 <switchOnLeds>
	
	GTCCR |= (1 << COM1B0);																		// Connect timer to PB4 and toggle on CTC
 2ac:	8c b5       	in	r24, 0x2c	; 44
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	8c bd       	out	0x2c, r24	; 44
 2b2:	0b ec       	ldi	r16, 0xCB	; 203
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	c1 eb       	ldi	r28, 0xB1	; 177
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	0f 2e       	mov	r0, r31
 2bc:	fe eb       	ldi	r31, 0xBE	; 190
 2be:	ef 2e       	mov	r14, r31
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ff 2e       	mov	r15, r31
 2c4:	f0 2d       	mov	r31, r0
 2c6:	0f 2e       	mov	r0, r31
 2c8:	f8 ed       	ldi	r31, 0xD8	; 216
 2ca:	cf 2e       	mov	r12, r31
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	df 2e       	mov	r13, r31
 2d0:	f0 2d       	mov	r31, r0
	
	for (uint8_t i=0; i<Mariolength; i++) {

		if (pgm_read_byte_near(Marionotes + i) != 0)	showColor();							// Change led colors if note changes
 2d2:	f8 01       	movw	r30, r16
 2d4:	84 91       	lpm	r24, Z
 2d6:	81 11       	cpse	r24, r1
 2d8:	9c df       	rcall	.-200    	; 0x212 <showColor>
		playTone(pgm_read_byte_near(Marionotes + i), pgm_read_byte_near(MarioOctave + i));		// Play note
 2da:	f7 01       	movw	r30, r14
 2dc:	64 91       	lpm	r22, Z
 2de:	f8 01       	movw	r30, r16
 2e0:	84 91       	lpm	r24, Z
 2e2:	cc df       	rcall	.-104    	; 0x27c <playTone>
		for(uint8_t j=0; j<pgm_read_byte_near(Mariobeats + i); j++) _delay_ms(35);				// delay to keep the note
 2e4:	fe 01       	movw	r30, r28
 2e6:	84 91       	lpm	r24, Z
 2e8:	88 23       	and	r24, r24
 2ea:	79 f0       	breq	.+30     	; 0x30a <playMario+0x70>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	ff eb       	ldi	r31, 0xBF	; 191
 2f0:	2a ed       	ldi	r18, 0xDA	; 218
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f1 50       	subi	r31, 0x01	; 1
 2f6:	20 40       	sbci	r18, 0x00	; 0
 2f8:	30 40       	sbci	r19, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <playMario+0x5a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <playMario+0x64>
 2fe:	00 00       	nop
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	fe 01       	movw	r30, r28
 304:	94 91       	lpm	r25, Z
 306:	89 17       	cp	r24, r25
 308:	90 f3       	brcs	.-28     	; 0x2ee <playMario+0x54>

		TCCR1 = 0x00;																			// Stops timer. No idea why 0x90 does not work here.
 30a:	10 be       	out	0x30, r1	; 48
 30c:	ff eb       	ldi	r31, 0xBF	; 191
 30e:	2a ed       	ldi	r18, 0xDA	; 218
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	f1 50       	subi	r31, 0x01	; 1
 314:	20 40       	sbci	r18, 0x00	; 0
 316:	30 40       	sbci	r19, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <playMario+0x78>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <playMario+0x82>
 31c:	00 00       	nop
 31e:	0f 5f       	subi	r16, 0xFF	; 255
 320:	1f 4f       	sbci	r17, 0xFF	; 255
 322:	21 96       	adiw	r28, 0x01	; 1
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	e8 1a       	sub	r14, r24
 328:	f8 0a       	sbc	r15, r24
	
	switchOnLeds();
	
	GTCCR |= (1 << COM1B0);																		// Connect timer to PB4 and toggle on CTC
	
	for (uint8_t i=0; i<Mariolength; i++) {
 32a:	0c 15       	cp	r16, r12
 32c:	1d 05       	cpc	r17, r13
 32e:	89 f6       	brne	.-94     	; 0x2d2 <playMario+0x38>

		TCCR1 = 0x00;																			// Stops timer. No idea why 0x90 does not work here.
		_delay_ms(35);																			// Pause between notes.
	}
	
	GTCCR &= ~( 1 << COM1B0);																	// Disconnect from PB4
 330:	8c b5       	in	r24, 0x2c	; 44
 332:	8f 7e       	andi	r24, 0xEF	; 239
 334:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~( 1 << PB4);																		// Switch off PB4
 336:	c4 98       	cbi	0x18, 4	; 24
	
	switchOffLeds();
 338:	93 df       	rcall	.-218    	; 0x260 <switchOffLeds>
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	08 95       	ret

0000034c <playSong>:


void	playSong (const uint8_t *note, const uint8_t *octave, const uint8_t *beats, const uint8_t songLenght) {
 34c:	9f 92       	push	r9
 34e:	af 92       	push	r10
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	6c 01       	movw	r12, r24
 364:	96 2e       	mov	r9, r22
 366:	a7 2e       	mov	r10, r23
 368:	e4 2e       	mov	r14, r20
 36a:	f5 2e       	mov	r15, r21
 36c:	b2 2e       	mov	r11, r18
	
	switchOnLeds();
 36e:	7c df       	rcall	.-264    	; 0x268 <switchOnLeds>
	
	GTCCR |= (1 << COM1B0);																	// Connect timer to PB4 and toggle on CTC
 370:	8c b5       	in	r24, 0x2c	; 44
 372:	80 61       	ori	r24, 0x10	; 16
 374:	8c bd       	out	0x2c, r24	; 44
		
	for (uint8_t i=0; i<songLenght; i++) {
 376:	bb 20       	and	r11, r11
 378:	09 f4       	brne	.+2      	; 0x37c <playSong+0x30>
 37a:	3a c0       	rjmp	.+116    	; 0x3f0 <playSong+0xa4>
 37c:	86 01       	movw	r16, r12
 37e:	ce 2d       	mov	r28, r14
 380:	df 2d       	mov	r29, r15
 382:	e9 2c       	mov	r14, r9
 384:	fa 2c       	mov	r15, r10
 386:	ba 94       	dec	r11
 388:	8b 2d       	mov	r24, r11
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	c8 0e       	add	r12, r24
 390:	d9 1e       	adc	r13, r25
		
		if (pgm_read_byte_near(note + i) != 0)	showColor();								// Change led colors if note changes
 392:	f8 01       	movw	r30, r16
 394:	84 91       	lpm	r24, Z
 396:	81 11       	cpse	r24, r1
 398:	3c df       	rcall	.-392    	; 0x212 <showColor>
		playTone(pgm_read_byte_near(note + i), pgm_read_byte_near(octave + i));				// Play note	
 39a:	f7 01       	movw	r30, r14
 39c:	64 91       	lpm	r22, Z
 39e:	f8 01       	movw	r30, r16
 3a0:	84 91       	lpm	r24, Z
 3a2:	6c df       	rcall	.-296    	; 0x27c <playTone>
		for(uint8_t j=0; j<pgm_read_byte_near(beats + i); j++) _delay_ms(100);				// Delay to keep note
 3a4:	fe 01       	movw	r30, r28
 3a6:	84 91       	lpm	r24, Z
 3a8:	88 23       	and	r24, r24
 3aa:	79 f0       	breq	.+30     	; 0x3ca <playSong+0x7e>
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ff ef       	ldi	r31, 0xFF	; 255
 3b0:	20 e7       	ldi	r18, 0x70	; 112
 3b2:	32 e0       	ldi	r19, 0x02	; 2
 3b4:	f1 50       	subi	r31, 0x01	; 1
 3b6:	20 40       	sbci	r18, 0x00	; 0
 3b8:	30 40       	sbci	r19, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <playSong+0x68>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <playSong+0x72>
 3be:	00 00       	nop
 3c0:	9f 5f       	subi	r25, 0xFF	; 255
 3c2:	fe 01       	movw	r30, r28
 3c4:	24 91       	lpm	r18, Z
 3c6:	92 17       	cp	r25, r18
 3c8:	90 f3       	brcs	.-28     	; 0x3ae <playSong+0x62>
					
		TCCR1 = 0x00;																		// Stops timer. No idea why 0x90 does note work here.
 3ca:	10 be       	out	0x30, r1	; 48
 3cc:	ff e7       	ldi	r31, 0x7F	; 127
 3ce:	28 e3       	ldi	r18, 0x38	; 56
 3d0:	31 e0       	ldi	r19, 0x01	; 1
 3d2:	f1 50       	subi	r31, 0x01	; 1
 3d4:	20 40       	sbci	r18, 0x00	; 0
 3d6:	30 40       	sbci	r19, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <playSong+0x86>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <playSong+0x90>
 3dc:	00 00       	nop
 3de:	0f 5f       	subi	r16, 0xFF	; 255
 3e0:	1f 4f       	sbci	r17, 0xFF	; 255
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	e8 1a       	sub	r14, r24
 3e8:	f8 0a       	sbc	r15, r24
	
	switchOnLeds();
	
	GTCCR |= (1 << COM1B0);																	// Connect timer to PB4 and toggle on CTC
		
	for (uint8_t i=0; i<songLenght; i++) {
 3ea:	0c 15       	cp	r16, r12
 3ec:	1d 05       	cpc	r17, r13
 3ee:	89 f6       	brne	.-94     	; 0x392 <playSong+0x46>
					
		TCCR1 = 0x00;																		// Stops timer. No idea why 0x90 does note work here.
		_delay_ms(50);																		// Pause between notes
	}
		
	GTCCR &= ~( 1 << COM1B0);																// Disconnect from PB4
 3f0:	8c b5       	in	r24, 0x2c	; 44
 3f2:	8f 7e       	andi	r24, 0xEF	; 239
 3f4:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~( 1 << PB4);																	// Switch off PB4
 3f6:	c4 98       	cbi	0x18, 4	; 24
	
	switchOffLeds();
 3f8:	33 df       	rcall	.-410    	; 0x260 <switchOffLeds>
	
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	ff 90       	pop	r15
 404:	ef 90       	pop	r14
 406:	df 90       	pop	r13
 408:	cf 90       	pop	r12
 40a:	bf 90       	pop	r11
 40c:	af 90       	pop	r10
 40e:	9f 90       	pop	r9
 410:	08 95       	ret

00000412 <__vector_2>:


ISR (PCINT0_vect) {
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	2f 93       	push	r18
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	81 ee       	ldi	r24, 0xE1	; 225
 426:	94 e0       	ldi	r25, 0x04	; 4
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__vector_2+0x16>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__vector_2+0x20>
 432:	00 00       	nop

	_delay_ms(200);
	while( !(PINB & ( 1 << PINB3 )));
 434:	b3 9b       	sbis	0x16, 3	; 22
 436:	fe cf       	rjmp	.-4      	; 0x434 <__vector_2+0x22>
	buttonCounter++;
 438:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <buttonCounter>
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <buttonCounter>
	
}
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <main>:

int main(void)
{
	
	// Setup I/O
	DDRB |= (1 << PB1);					// Neopixel Data Output
 452:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1 << PB0);					// Neopixel enable
 454:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << PB4);					// Buzzer output
 456:	bc 9a       	sbi	0x17, 4	; 23
	DDRB &= ~(1 << PB3);				// Button input
 458:	bb 98       	cbi	0x17, 3	; 23
	PORTB |= (1 << PB3);				// Pull-up resistor
 45a:	c3 9a       	sbi	0x18, 3	; 24


	switchOffLeds();
 45c:	01 df       	rcall	.-510    	; 0x260 <switchOffLeds>
			
	// Setup interrupt on PB3
	PCMSK |= ( 1 << PCINT3);		// Enable Pin Change Interrupt on PB3
 45e:	ab 9a       	sbi	0x15, 3	; 21
	GIMSK |= ( 1 << PCIE);			// Enable Pin Change Interrupts
 460:	8b b7       	in	r24, 0x3b	; 59
 462:	80 62       	ori	r24, 0x20	; 32
 464:	8b bf       	out	0x3b, r24	; 59
	sei();
 466:	78 94       	sei
	
	// Setup power savings
	ADCSRA = 0;						// Disable ADC
 468:	16 b8       	out	0x06, r1	; 6
	PRR |= (1 << PRADC) | (1 << PRTIM0) | ( 1 << PRUSI) ;			// Power off ADC, USI, TIMER0
 46a:	80 b5       	in	r24, 0x20	; 32
 46c:	87 60       	ori	r24, 0x07	; 7
 46e:	80 bd       	out	0x20, r24	; 32
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 470:	85 b7       	in	r24, 0x35	; 53
 472:	87 7e       	andi	r24, 0xE7	; 231
 474:	80 61       	ori	r24, 0x10	; 16
 476:	85 bf       	out	0x35, r24	; 53
 		sei();
		sleep_mode();					// Sleep.....
 		cli();


		if ( ((buttonCounter/33) > 0) && (buttonCounter%33 == 0)  ) playMario();							// Play Mario when button is pressed 33 times
 478:	c1 e2       	ldi	r28, 0x21	; 33
 47a:	02 c0       	rjmp	.+4      	; 0x480 <main+0x2e>
			if (toSong == Jingle) playSong(Jinglenotes, JingleOctave, Jinglebeats, Jinglelength);
			if (toSong == Frosty) playSong(Frostynotes, FrostyOctave, Frostybeats, Frostylength);
			if (toSong == Deck)   playSong(Decknotes, Deckocatave, Deckbeats, Decklength);
			if (toSong == Merry)  playSong(Merrynotes, MerryOctave, Merrybeats, Merrylength);
			
			toSong = toSong + 1;	// Next song
 47c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <toSong>

    while (1) 
    {


 		sei();
 480:	78 94       	sei
		sleep_mode();					// Sleep.....
 482:	85 b7       	in	r24, 0x35	; 53
 484:	80 62       	ori	r24, 0x20	; 32
 486:	85 bf       	out	0x35, r24	; 53
 488:	88 95       	sleep
 48a:	85 b7       	in	r24, 0x35	; 53
 48c:	8f 7d       	andi	r24, 0xDF	; 223
 48e:	85 bf       	out	0x35, r24	; 53
 		cli();
 490:	f8 94       	cli


		if ( ((buttonCounter/33) > 0) && (buttonCounter%33 == 0)  ) playMario();							// Play Mario when button is pressed 33 times
 492:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <buttonCounter>
 496:	81 32       	cpi	r24, 0x21	; 33
 498:	30 f0       	brcs	.+12     	; 0x4a6 <main+0x54>
 49a:	6c 2f       	mov	r22, r28
 49c:	3d d0       	rcall	.+122    	; 0x518 <__udivmodqi4>
 49e:	91 11       	cpse	r25, r1
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <main+0x54>
 4a2:	fb de       	rcall	.-522    	; 0x29a <playMario>
 4a4:	ed cf       	rjmp	.-38     	; 0x480 <main+0x2e>
		else {
			
			if (toSong == Jingle) playSong(Jinglenotes, JingleOctave, Jinglebeats, Jinglelength);
 4a6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <toSong>
 4aa:	81 11       	cpse	r24, r1
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <main+0x6c>
 4ae:	2b e1       	ldi	r18, 0x1B	; 27
 4b0:	45 e3       	ldi	r20, 0x35	; 53
 4b2:	51 e0       	ldi	r21, 0x01	; 1
 4b4:	60 e5       	ldi	r22, 0x50	; 80
 4b6:	71 e0       	ldi	r23, 0x01	; 1
 4b8:	8b e6       	ldi	r24, 0x6B	; 107
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	47 df       	rcall	.-370    	; 0x34c <playSong>
			if (toSong == Frosty) playSong(Frostynotes, FrostyOctave, Frostybeats, Frostylength);
 4be:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <toSong>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	41 f4       	brne	.+16     	; 0x4d6 <main+0x84>
 4c6:	2f e1       	ldi	r18, 0x1F	; 31
 4c8:	48 ed       	ldi	r20, 0xD8	; 216
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	67 ef       	ldi	r22, 0xF7	; 247
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	86 e1       	ldi	r24, 0x16	; 22
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	3b df       	rcall	.-394    	; 0x34c <playSong>
			if (toSong == Deck)   playSong(Decknotes, Deckocatave, Deckbeats, Decklength);
 4d6:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <toSong>
 4da:	83 30       	cpi	r24, 0x03	; 3
 4dc:	41 f4       	brne	.+16     	; 0x4ee <main+0x9c>
 4de:	22 e1       	ldi	r18, 0x12	; 18
 4e0:	4e e1       	ldi	r20, 0x1E	; 30
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	60 e3       	ldi	r22, 0x30	; 48
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	82 e4       	ldi	r24, 0x42	; 66
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	2f df       	rcall	.-418    	; 0x34c <playSong>
			if (toSong == Merry)  playSong(Merrynotes, MerryOctave, Merrybeats, Merrylength);
 4ee:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <toSong>
 4f2:	82 30       	cpi	r24, 0x02	; 2
 4f4:	41 f4       	brne	.+16     	; 0x506 <main+0xb4>
 4f6:	2f e1       	ldi	r18, 0x1F	; 31
 4f8:	44 e5       	ldi	r20, 0x54	; 84
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	63 e7       	ldi	r22, 0x73	; 115
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	82 e9       	ldi	r24, 0x92	; 146
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	23 df       	rcall	.-442    	; 0x34c <playSong>
			
			toSong = toSong + 1;	// Next song
 506:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <toSong>
 50a:	8f 5f       	subi	r24, 0xFF	; 255
			if (toSong == LastSong) toSong = Jingle;	// Return to first song 
 50c:	84 30       	cpi	r24, 0x04	; 4
 50e:	09 f0       	breq	.+2      	; 0x512 <main+0xc0>
 510:	b5 cf       	rjmp	.-150    	; 0x47c <main+0x2a>
 512:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <toSong>
 516:	b4 cf       	rjmp	.-152    	; 0x480 <main+0x2e>

00000518 <__udivmodqi4>:
 518:	99 1b       	sub	r25, r25
 51a:	79 e0       	ldi	r23, 0x09	; 9
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__udivmodqi4_ep>

0000051e <__udivmodqi4_loop>:
 51e:	99 1f       	adc	r25, r25
 520:	96 17       	cp	r25, r22
 522:	08 f0       	brcs	.+2      	; 0x526 <__udivmodqi4_ep>
 524:	96 1b       	sub	r25, r22

00000526 <__udivmodqi4_ep>:
 526:	88 1f       	adc	r24, r24
 528:	7a 95       	dec	r23
 52a:	c9 f7       	brne	.-14     	; 0x51e <__udivmodqi4_loop>
 52c:	80 95       	com	r24
 52e:	08 95       	ret

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
